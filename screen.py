# Datasheet: https:#cdn-shop.adafruit.com/datasheets/SSD1306.pdf
# Ejemplo base: https:#github.com/sxkod/ssd1306/blob/main/xoled.py#L77

# TODO: 
# 1.- Mapear todas las letras y numeros.
# 2.- Ver si es posible usar colores con las letras.
# 3.- Implementar dibujo de lineas
# 4.- Implementar dibujo de cuadrado o rectangulo
# 5.- Ordenar y comentar funcionamiento.

#!/usr/bin/env python

from smbus import SMBus

I2C_BUS = 1

# i2cdetect -y 1
#      0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
# 00:                         -- -- -- -- -- -- -- -- 
# 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
# 20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
# 30: -- -- -- -- -- -- -- -- -- -- -- -- 3c -- -- -- 
# 40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
# 50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
# 60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
# 70: -- -- -- -- -- -- -- --
I2C_ADDRESS = 0x3C

# SDA is for input and output

# Pages = 8, 1 page vertically is 1 byte, 
# Column is 8 bits (1 byte)
# Pages x 1 byte = 8 x 8 = 64 bits (rows)
# Page contains 128 bits as columns, 16 bytes
# Most significant bit is bottom, Les significant bits is top
WIDTH = 128 # columns
HEIGHT = 64 # rows 

# Control byte
# |----------------------------------|
# | Co | D/C | 0 | 0 | 0 | 0 | 0 | 0 |
# |----------------------------------|
# 
# After the transmission of the slave address, either the control byte or the data byte may be sent across the SDA. A control byte mainly consists of 
# Co and D/C# bits following by six “0” ‘s.
#   a. If the Co bit is set as logic “0”, the transmission of the following information will contain data bytes only.
#   b. The D/C# bit determines the next data byte is acted as a command or a data. If the D/C# bit is set to logic “0”, 
#   it defines the following data byte as a command. If the D/C# bit is set to logic “1”, it defines the following data byte as a 
#   data which will be stored at the GDDRAM. The GDDRAM column address pointer will be increased by one automatically after each data write.
COMMAND_CONTROL_BYTE    = 0x00    # 0000_0000
DATA_CONTROL_BYTE       = 0x40    # 0100_0000

COMMAND_DISPLAY_OFF         = 0xAE
COMMAND_DISPLAY_ON          = 0xAF
COMMAND_DISPLAY_START_LINE  = 0x40
COMMAND_MEMORY_MODE         = 0x20
COMMAND_NORMAL_DISPLAY      = 0xA6

START_PAGE_INDEX            = 0xB0
ADDRESS_LOWER_NIBBLE        = 0x00
ADDRESS_HIGHER_NIBBLE       = 0x10
ADDRESS_MASK                = 0x0F

FONT = {
    'A': [0x7c, 0x12, 0x11, 0x12, 0x7c, 0x00],
    'B': [0x7f, 0x49, 0x49, 0x49, 0x36, 0x00],
    'C': [0x3e, 0x41, 0x41, 0x41, 0x22, 0x00],
    'D': [0x7f, 0x41, 0x41, 0x41, 0x3e, 0x00],
    'E': [0x7f, 0x49,0x49,0x49,0x41, 0x00],
    'F': [0x7f, 0x09,0x09,0x09,0x01, 0x00],
    'G': [0x3e, 0x41,0x49,0x49,0x7a, 0x00],
    'H': [0x7f, 0x08,0x08,0x08,0x7f, 0x00],
    'I': [0x00, 0x41,0x7f,0x41,0x00, 0x00],
    'J': [0x20, 0x40,0x40,0x40,0x3f, 0x00],  
    'K': [0x7f, 0x08,0x14,0x22,0x41, 0x00],  
    'L': [0x7f, 0x40,0x40,0x40,0x40, 0x00],  
    'M': [0x7f, 0x02,0x0c,0x02,0x7f, 0x00],  
    'N': [0x7f, 0x04,0x08,0x10,0x7f, 0x00],  
    'O': [0x3e, 0x41,0x41,0x41,0x3e, 0x00],  
    'P': [0x7f, 0x09,0x09,0x09,0x06, 0x00],  
    'Q': [0x3e, 0x41,0x51,0x21,0x5e, 0x00],  
    'R': [0x7f, 0x09,0x19,0x29,0x46, 0x00],  
    'S': [0x26, 0x49,0x49,0x49,0x32, 0x00],  
    'T': [0x01, 0x01,0x7f,0x01,0x01, 0x00],  
    'U': [0x3f, 0x40,0x40,0x40,0x3f, 0x00],  
    'V': [0x1f, 0x20,0x40,0x20,0x1f, 0x00],  
    'W': [0x1f, 0x60,0x18,0x60,0x1f, 0x00],  
    'X': [0x63, 0x14,0x08,0x14,0x63, 0x00],  
    'Y': [0x03, 0x04,0x78,0x04,0x03, 0x00],  
    'Z': [0x61, 0x51,0x49,0x45,0x43, 0x00],  
    ' ': [0x00, 0x00, 0x00, 0x00, 0x00],
    '!': [0x00,0x00,0x5f,0x00,0x00]
}

# FONTS  = [
#       0x00,0x00,0x00,0x00,0x00,  # space
#       0x00,0x00,0x5f,0x00,0x00,  # !
#       0x00,0x07,0x00,0x07,0x00,  # "
#       0x14,0x7f,0x14,0x7f,0x14,  # #
#       0x24,0x2a,0x6b,0x2a,0x12,  # $
#       0x63,0x13,0x08,0x64,0x63,  # %
#       0x36,0x49,0x56,0x20,0x50,  # &
#       0x00,0x00,0x07,0x00,0x00,  # '
#       0x00,0x3c,0x42,0x81,0x00,  # (
#       0x00,0x81,0x42,0x3c,0x00,  # )
#       0x14,0x08,0x3e,0x08,0x14,  # *
#       0x08,0x08,0x3e,0x08,0x08,  # +
#       0x00,0x80,0x60,0x00,0x00,  # ,
#       0x08,0x08,0x08,0x08,0x08,  # -
#       0x00,0x00,0x60,0x00,0x00,  # .
#       0xc0,0x30,0x0c,0x03,0x00,  # /
#       0x3e,0x51,0x49,0x45,0x3e,  # 0
#       0x00,0x42,0x7f,0x40,0x00,  # 1
#       0x62,0x51,0x49,0x49,0x46,  # 2
#       0x22,0x41,0x49,0x49,0x36,  # 3
#       0x18,0x14,0x12,0x7f,0x10,  # 4
#       0x27,0x45,0x45,0x45,0x39,  # 5
#       0x3c,0x4a,0x49,0x49,0x30,  # 6
#       0x01,0x71,0x09,0x05,0x03,  # 7
#       0x36,0x49,0x49,0x49,0x36,  # 8
#       0x06,0x49,0x49,0x29,0x1e,  # 9
#       0x00,0x00,0x6c,0x00,0x00,  # :
#       0x00,0x80,0x6c,0x00,0x00,  # ;
#       0x08,0x14,0x22,0x41,0x00,  # <
#       0x24,0x24,0x24,0x24,0x24,  # =
#       0x00,0x41,0x22,0x14,0x08,  # >
#       0x02,0x01,0x51,0x09,0x06,  # ?

#       0x3e,0x41,0x5d,0x55,0x1e,  # @
#       0x7c,0x12,0x11,0x12,0x7c,  # A
#       0x7f,0x49,0x49,0x49,0x36,  # B
#       0x3e,0x41,0x41,0x41,0x22,  # C
#       0x7f,0x41,0x41,0x41,0x3e,  # D
#       0x7f,0x49,0x49,0x49,0x41,  # E
#       0x7f,0x09,0x09,0x09,0x01,  # F
#       0x3e,0x41,0x49,0x49,0x7a,  # G
#       0x7f,0x08,0x08,0x08,0x7f,  # H
#       0x00,0x41,0x7f,0x41,0x00,  # I
#       0x20,0x40,0x40,0x40,0x3f,  # J
#       0x7f,0x08,0x14,0x22,0x41,  # K
#       0x7f,0x40,0x40,0x40,0x40,  # L
#       0x7f,0x02,0x0c,0x02,0x7f,  # M
#       0x7f,0x04,0x08,0x10,0x7f,  # N
#       0x3e,0x41,0x41,0x41,0x3e,  # O
#       0x7f,0x09,0x09,0x09,0x06,  # P
#       0x3e,0x41,0x51,0x21,0x5e,  # Q
#       0x7f,0x09,0x19,0x29,0x46,  # R
#       0x26,0x49,0x49,0x49,0x32,  # S
#       0x01,0x01,0x7f,0x01,0x01,  # T
#       0x3f,0x40,0x40,0x40,0x3f,  # U
#       0x1f,0x20,0x40,0x20,0x1f,  # V
#       0x1f,0x60,0x18,0x60,0x1f,  # W
#       0x63,0x14,0x08,0x14,0x63,  # X
#       0x03,0x04,0x78,0x04,0x03,  # Y
#       0x61,0x51,0x49,0x45,0x43,  # Z
#       0x00,0xff,0x81,0x81,0x00,  # [
#       0x03,0x0c,0x30,0xc0,0x00,  # backslash
#       0x00,0x81,0x81,0xff,0x00,  # ]
#       0x04,0x02,0x01,0x02,0x04,  # ^
#       0x80,0x80,0x80,0x80,0x80,  # _

#       0x06,0x09,0x09,0x06,0x00,  # ` (Degree symbol)
#       0x20,0x54,0x54,0x54,0x78,  # a
#       0x7f,0x48,0x48,0x48,0x30,  # b
#       0x38,0x44,0x44,0x44,0x00,  # c
#       0x30,0x48,0x48,0x48,0x7f,  # d
#       0x38,0x54,0x54,0x54,0x08,  # e
#       0x08,0x7e,0x09,0x09,0x00,  # f
#       0x18,0xa4,0xa4,0xa4,0x7c,  # g
#       0x7f,0x08,0x08,0x70,0x00,  # h
#       0x00,0x00,0x7d,0x40,0x00,  # i
#       0x40,0x80,0x84,0x7d,0x00,  # j
#       0x7f,0x10,0x28,0x44,0x00,  # k
#       0x00,0x00,0x7f,0x40,0x00,  # l
#       0x7c,0x04,0x18,0x04,0x78,  # m
#       0x7c,0x04,0x04,0x78,0x00,  # n
#       0x38,0x44,0x44,0x44,0x38,  # o
#       0xfc,0x24,0x24,0x24,0x18,  # p
#       0x18,0x24,0x24,0x24,0xfc,  # q
#       0x7c,0x08,0x04,0x04,0x00,  # r
#       0x08,0x54,0x54,0x54,0x20,  # s
#       0x04,0x3e,0x44,0x44,0x00,  # t
#       0x3c,0x40,0x40,0x20,0x7c,  # u
#       0x1c,0x20,0x40,0x20,0x1c,  # v
#       0x3c,0x60,0x30,0x60,0x3c,  # w
#       0x6c,0x10,0x10,0x6c,0x00,  # x
#       0x9c,0xa0,0x60,0x3c,0x00,  # y
#       0x64,0x54,0x54,0x4c,0x00,  # z
#       0x00,0x08,0x76,0x81,0x81,  # {
#       0x00,0x00,0xff,0x00,0x00,  # |
#       0x81,0x81,0x76,0x08,0x00,  # }
#       0x4c,0x72,0x02,0x72,0x4c,  # ~ (Omega character)
#       0x55,0x2a,0x55,0x2a,0x55   # del
# ]

bus = SMBus(I2C_BUS)

def send_command(command):
    bus.write_byte_data(I2C_ADDRESS, COMMAND_CONTROL_BYTE, command)

def send_data(data):
    bus.write_byte_data(I2C_ADDRESS, DATA_CONTROL_BYTE, data)

# we have 64 rows are 8 pages
# 128 colums are 16 bytes
def draw_pixel(row, column):
    page = row // 8
    bit = row % 8
    set_matrix_address(page, column)
    send_data(1 << bit)

def set_matrix_address(page, column):
#     In normal display data RAM read or write and page addressing mode, the following steps are required to define the starting RAM access pointer location:
#       • Set the page start address of the target display location by command B0h to B7h.
#       • Set the lower start column address of pointer by command 00h~0Fh.
#       • Set the upper start column address of pointer by command 10h~1Fh.
    send_command( START_PAGE_INDEX | (page & ADDRESS_MASK) )
    send_command( ADDRESS_LOWER_NIBBLE | (column & ADDRESS_MASK) )
    send_command( ADDRESS_HIGHER_NIBBLE | ((column >> 4) & ADDRESS_MASK) )

def clear_screen():
    for page in range(HEIGHT // 8):    
        set_matrix_address(page, 0)
        for _ in range(WIDTH):
            send_data(0x00)

def draw_text(message, row):
    
    col = 0
    for char in message:
        ascii = FONT[char]
        for ascii_value in ascii:
            set_matrix_address(row, col)
            send_data(ascii_value)
            col += 1
        

def initialize():
    # Software Initialization Flow Chart
    init_buffer = [
        COMMAND_DISPLAY_OFF,
        0xD5, 0x80, # Clock
        0xA8, 0x3F, # Mux ratio
        0xD3, 0x00, # Display offset
        COMMAND_DISPLAY_START_LINE,
        COMMAND_MEMORY_MODE, 0x00,
        0xA1,       # Segment re-map
        0xC8,       # COM output scan direction
        0xDA, 0x12, # COM pins configuration    # no se porque el segundo parametro y su valor
        0x81, 0x7F, # Contrast control
        0xD9, 0xF1,        # Pre-charge
        0xDB, 0x40,        # VCOMH deselect
        0xA4,       # Entire display on
        COMMAND_NORMAL_DISPLAY,
        0x8D, 0x14, # charger pump regulator
        COMMAND_DISPLAY_ON
    ]

    for command in init_buffer:
        send_command(command)

    clear_screen()
    row = 3
    column = 1
    index = 0   
    x = range(20)

    #send_command(COMMAND_DISPLAY_OFF)

    # son 64 filas, quiero la 19
    row = 19
    # row # 8 = 2, pagina 2
    column = 1 # 0000_0011
    # 1 pixel es 1 bit, solo quiero pintar un bit no la columna completa!
    #
    # 0 LSB 1px
    # 0     1px
    # 1     1px
    # 1     1px -> este quiero pintar
    # 0     1px
    # 0     1px
    # 0     1px
    # 0 MSB 1px
    # column = 0
    # row = 5
    # index = 0
    # for n in x:
    #     draw_pixel(row, column + index )
    #     index += 1

    draw_text('ZERO VOLTS', 1)

initialize()
